{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 AppleColorEmoji;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red57\green0\blue160;\red255\green255\blue255;\red0\green0\blue0;
\red108\green54\blue169;\red28\green70\blue74;\red196\green26\blue22;\red50\green109\blue116;\red28\green0\blue207;
\red93\green108\blue121;\red155\green35\blue147;\red11\green79\blue121;\red15\green104\blue160;\red93\green108\blue121;
\red14\green14\blue255;\red255\green255\blue255;\red31\green31\blue36;\red208\green168\blue255;\red161\green103\blue230;
\red252\green106\blue93;\red161\green103\blue230;\red208\green191\blue105;}
{\*\expandedcolortbl;;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c11000\c0\c81000;
\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c36526\c42188\c47515\c35000;
\csgenericrgb\c5500\c5500\c100000;\csgenericrgb\c100000\c100000\c100000\c85000;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c81569\c65882\c100000;\csgenericrgb\c63137\c40392\c90196;
\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c81498\c74939\c41233;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab692
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb3 //Below is Navigation link from HomeView to GoldSelectionView if we use NavigationView\
\
NavigationLink\cf4 (\cf5 destination\cf4 : \cf6 GoldSelectionView\cf4 ().\cf5 navigationTitle\cf4 (\cf7 "Add some gold... 
\f1 \uc0\u55357 \u56401 
\f0 "\cf4 ), \cf5 label\cf4 : \{\cf2 Text\cf4 (\cf7 "Add Gold"\cf4 )\})\
                                    .\cf5 navigationViewStyle\cf4 (.\cf5 automatic\cf4 )\
\
//SwiftUI textfield for jar creation\
\cf2 TextField\cf4 (\cf7 ""\cf4 , \cf2 text\cf4 : \cf8 $jarName\cf4 )\
                            .\cf5 font\cf4 (.\cf5 custom\cf4 (\cf7 "Avenir Next"\cf4 , \cf5 size\cf4 : \cf9 20\cf4 , \cf5 relativeTo\cf4 : .\cf5 headline\cf4 ).\cf5 bold\cf4 ())\
                            .\cf5 focused\cf4 (\cf8 $isJarNameFocused\cf4 )\
                            .\cf5 multilineTextAlignment\cf4 (\cf2 TextAlignment\cf4 .\cf5 center\cf4 )\
                            .\cf5 textInputAutocapitalization\cf4 (.\cf5 never\cf4 )\
                            \cf10 //Restrict jar name to 20 characters\cf4 \
                            .\cf5 onReceive\cf4 (\cf8 jarName\cf4 .\cf5 publisher\cf4 .\cf5 collect\cf4 ()) \{\
                                    
\f2\b \cf11 self
\f0\b0 \cf4 .\cf8 jarName\cf4  = \cf2 String\cf4 ($0.\cf5 prefix\cf4 (\cf9 20\cf4 ))\
                                \}\
                            \cf10 //Immediately show keyboard for input\cf4 \
                            .\cf5 task\cf4  \{\
                                DispatchQueue.\cf5 main\cf4 .asyncAfter(deadline: .\cf5 now\cf4 () + \cf9 0.6\cf4 ) \{\
                                        
\f2\b \cf11 self
\f0\b0 \cf4 .\cf8 isJarNameFocused\cf4  = 
\f2\b \cf11 true
\f0\b0 \cf4 \
                                   \}\
                            \}\
\
//Blue gradient background for HomeView\
\cf2 Color\cf4 (\cf2 red\cf4 : \cf9 0.09\cf4 , \cf2 green\cf4 : \cf9 0.25\cf4 , \cf2 blue\cf4 : \cf9 0.81\cf4 )\
                .\cf5 overlay\cf4  \{\
                    \cf2 Image\cf4 (\cf7 "glamorous"\cf4 )\
                        .\cf5 resizable\cf4 (\cf5 resizingMode\cf4 : .\cf5 tile\cf4 )\
                        .\cf5 opacity\cf4 (\cf9 0.1\cf4 )\
                \}\
                .\cf5 overlay\cf4  \{\
                    \cf2 RadialGradient\cf4 (\cf5 colors\cf4 : [\cf2 Color\cf4 (\cf2 red\cf4 : \cf9 0.33\cf4 , \cf2 green\cf4 : \cf9 0.87\cf4 , \cf2 blue\cf4 : \cf9 0.98\cf4 ).\cf5 opacity\cf4 (\cf9 0.8\cf4 ), \cf2 Color\cf4 (\cf2 red\cf4 : \cf9 0.09\cf4 , \cf2 green\cf4 : \cf9 0.25\cf4 , \cf2 blue\cf4 : \cf9 0.81\cf4 ).\cf5 opacity\cf4 (\cf9 0.4\cf4 )], \cf5 center\cf4 : .\cf5 center\cf4 , \cf5 startRadius\cf4 : \cf9 100\cf4 , \cf5 endRadius\cf4 : \cf9 500\cf4 )\
\
//Capsule button\
\cf2 Button\cf4 (\cf7 "Next"\cf4 ) \{\
                            \
                            \cf5 print\cf4 (\cf7 "Button pressed!"\cf4 )\
                        \}\
                        .\cf5 font\cf4 (.\cf5 custom\cf4 (\cf7 "Avenir Next"\cf4 , \cf5 size\cf4 : \cf9 20\cf4 , \cf5 relativeTo\cf4 : .\cf5 headline\cf4 ).\cf5 bold\cf4 ())\
                        .\cf5 padding\cf4 ()\
                        .\cf5 padding\cf4 (.\cf5 horizontal\cf4 )\
                        .\cf5 foregroundColor\cf4 (.\cf5 white\cf4 )\
                        .\cf5 background\cf4 (\
                            \cf2 LinearGradient\cf4 (\cf5 colors\cf4 : [\cf2 Color\cf4 (\cf2 red\cf4 : \cf9 0.16\cf4 , \cf2 green\cf4 : \cf9 0.16\cf4 , \cf2 blue\cf4 : \cf9 0.16\cf4 ), .\cf5 black\cf4 ], \cf5 startPoint\cf4 : .\cf5 top\cf4 , \cf5 endPoint\cf4 : .\cf5 bottom\cf4 )\
                        )\
                        .\cf5 clipShape\cf4 (\cf2 Capsule\cf4 ())\
                        .\cf5 padding\cf4 (.\cf5 bottom\cf4 , \cf9 40\cf4 )\
\
//Passing value from child to parent with preference key\
\cf6 Pager\cf4 (\cf8 page\cf4 : \cf8 page\cf4 , \cf8 data\cf4 : \cf6 Currency\cf4 .\cf5 allCases\cf4 , \cf8 id\cf4 : \\.
\f2\b \cf11 self
\f0\b0 \cf4 ) \{ item 
\f2\b \cf11 in
\f0\b0 \cf4 \
                                    \cf2 GeometryReader\cf4  \{ geo 
\f2\b \cf11 in
\f0\b0 \cf4 \
                                        
\f2\b \cf11 let
\f0\b0 \cf4  offset = geo.\cf5 frame\cf4 (\cf5 in\cf4 : .\cf5 global\cf4 ).\cf5 minX\cf4 \
                                        
\f2\b \cf11 self
\f0\b0 \cf4 .\cf8 pageView\cf4 (item)\
                                            .\cf5 padding\cf4 ()\
                                            .\cf5 preference\cf4 (\cf5 key\cf4 : \cf6 OffsetKey\cf4 .
\f2\b \cf11 self
\f0\b0 \cf4 , \cf5 value\cf4 : offset)\
                                    \}\
                                \}\
                                .\cf8 multiplePagination\cf4 ()\
                                .\cf8 preferredItemSize\cf4 (\cf2 CGSize\cf4 (\cf5 width\cf4 : \cf9 240\cf4 , \cf5 height\cf4 : \cf9 290\cf4 ))\
                                .\cf8 itemSpacing\cf4 (\cf9 10\cf4 )\
                                .\cf8 bounces\cf4 (
\f2\b \cf11 true
\f0\b0 \cf4 )\
                                .\cf8 interactive\cf4 (\cf8 scale\cf4 : \cf9 0.7\cf4 )\
                                .\cf8 draggingAnimation\cf4 (.\cf8 interactive\cf4 )\
                                .\cf8 itemAspectRatio\cf4 (\cf9 0\cf4 , \cf8 alignment\cf4 : .\cf8 end\cf4 )\
                                .\cf8 onPageChanged\cf4 (\{ (newIndex) 
\f2\b \cf11 in
\f0\b0 \cf4 \
                                    \cf8 selectedCurrency\cf4  = \cf6 Currency\cf4 .\cf5 allCases\cf4 [newIndex]\
                                \})\
                                \cf10 //Pass scroll value to preference key\cf4 \
                                .\cf5 onPreferenceChange\cf4 (\cf6 OffsetKey\cf4 .
\f2\b \cf11 self
\f0\b0 \cf4 ) \{ value 
\f2\b \cf11 in
\f0\b0 \cf4 \
                                    \cf8 movement\cf4  = value\
                                \}\
\
//And the struct of preference key itself\

\f2\b \cf11 struct
\f0\b0 \cf4  \cf12 OffsetKey\cf4 : \cf2 PreferenceKey\cf4  \{\
    
\f2\b \cf11 static
\f0\b0 \cf4  
\f2\b \cf11 var
\f0\b0 \cf4  \cf13 defaultValue\cf4 : \cf2 CGFloat\cf4  = \cf9 0\cf4 \
    \
    
\f2\b \cf11 static
\f0\b0 \cf4  
\f2\b \cf11 func
\f0\b0 \cf4  \cf13 reduce\cf4 (\cf13 value\cf4 : 
\f2\b \cf11 inout
\f0\b0 \cf4  \cf2 CGFloat\cf4 , \cf13 nextValue\cf4 : () -> \cf2 CGFloat\cf4 ) \{\
        value = nextValue()\
    \}\
\}\
\
//extension to calculate width of string\

\f2\b \cf11 extension
\f0\b0 \cf4  \cf12 String\cf4  \{\
    
\f2\b \cf11 func
\f0\b0 \cf4  \cf13 widthOfString\cf4 (\cf13 usingFont\cf4  font: \cf2 UIFont\cf4 ) -> \cf2 CGFloat\cf4  \{\
        
\f2\b \cf11 let
\f0\b0 \cf4  fontAttributes = [\cf2 NSAttributedString\cf4 .\cf2 Key\cf4 .\cf5 font\cf4 : font]\
        
\f2\b \cf11 let
\f0\b0 \cf4  size = 
\f2\b \cf11 self
\f0\b0 \cf4 .\cf5 size\cf4 (\cf5 withAttributes\cf4 : fontAttributes)\
        
\f2\b \cf11 return
\f0\b0 \cf4  size.\cf5 width\cf4 \
    \}\
\}\
\
//Legacy TextField - makeUIView\
\cf10 //        if keyboard == .decimalPad \{\cf4 \
\cf10 //            view.placeholder = "0"\cf4 \
\cf10 //        \}\cf4 \
\
\
//Legacy TextField - UpdateUIview func\
\cf10 //        if keyboard == .decimalPad \{\cf4 \
\cf10 //            uiView.text =  text + text.getSymbol(forCurrencyCode: currency)!\cf4 \
\cf10 //        \} else \{\cf4 \
\cf10 //            uiView.text = text\cf4 \
\cf10 //        \}\
\
\
\
//        let label = UILabel(frame: CGRect(x :0,y :0,width :10,height: 10))\cf4 \
\cf10 //        label.text = text.getSymbol(forCurrencyCode: currency)!\cf4 \
\cf10 //        label.font = .boldSystemFont(ofSize: 26)\cf4 \
\cf10 //        label.contentMode = .right\cf4 \
\cf10 //        label.textAlignment = .right\cf4 \
\cf10 //        uiView.leftViewMode = .always\cf4 \
\cf10 //        uiView.leftView = label\
\
\
//Default text 0 is replaced with user input\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0
\cf14 /**\cf4 \
                 
\f3 \cf10 Default value 0 is replaced with user input
\f0 \cf4 \
                 \cf15 https://stackoverflow.com/questions/51926523/setting-default-uitextfield-value-of-0-calculator\cf4 \
                \cf14  */\cf4 \
                
\f2\b \cf11 guard
\f0\b0 \cf4  
\f2\b \cf11 let
\f0\b0 \cf4  textFieldString = textField.\cf5 text\cf4 , 
\f2\b \cf11 let
\f0\b0 \cf4  range = \cf2 Range\cf4 (range, \cf2 in\cf4 : textFieldString) 
\f2\b \cf11 else
\f0\b0 \cf4  \{\
                    
\f2\b \cf11 return
\f0\b0 \cf4  
\f2\b \cf11 false
\f0\b0 \cf4 \
                \}\
                
\f2\b \cf11 let
\f0\b0 \cf4  newString = textFieldString.\cf5 replacingCharacters\cf4 (\cf5 in\cf4 : range, \cf5 with\cf4 : string)\
                
\f2\b \cf11 if
\f0\b0 \cf4  newString.\cf5 isEmpty\cf4  \{\
                    textField.\cf5 text\cf4  = \cf7 "0"\cf4 \
                    
\f2\b \cf11 return
\f0\b0 \cf4  
\f2\b \cf11 false
\f0\b0 \cf4 \
                \} 
\f2\b \cf11 else
\f0\b0 \cf4  
\f2\b \cf11 if
\f0\b0 \cf4  textField.\cf5 text\cf4  == \cf7 "0"\cf4  \{\
                    textField.\cf5 text\cf4  = string\
                    
\f2\b \cf11 return
\f0\b0 \cf4  
\f2\b \cf11 false
\f0\b0 \cf4 \
                \}\
                
\f2\b \cf11 return
\f0\b0 \cf4  
\f2\b \cf11 true\
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f0\b0 \cf10 //Buttons trigger Nav link\cf4 \
    \cf10 //                HStack(spacing: 20) \{\cf4 \
    \cf10 //                    NavigationLink(destination: AddCashView3(), tag: 1, selection: $selection) \{\cf4 \
    \cf10 //                        AddAssetRectButton(image: "banknote", text: "Add cash", action: \{self.selection = 1\})\cf4 \
    \cf10 //                    \}\cf4 \
    \cf10 //                    .buttonStyle(PlainButtonStyle())\cf4 \
    \cf10 //\cf4 \
    \cf10 //                    NavigationLink(destination: GoldSelectionView2().navigationTitle("Select your gold"), tag: 2, selection: $selection) \{\cf4 \
    \cf10 //                        AddAssetRectButton(image: "scalemass", text: "Add gold", action: \{self.selection = 2\})\cf4 \
    \cf10 //                    \}\cf4 \
    \cf10 //                    .buttonStyle(PlainButtonStyle())\cf4 \
    \cf10 //\cf4 \
    \cf10 //                    NavigationLink(destination: AddBitCoinView(), tag: 3, selection: $selection) \{\cf4 \
    \cf10 //                        AddAssetRectButton(image: "bitcoinsign.circle", text: "Add crypto", action: \{self.selection = 3\})\cf4 \
    \cf10 //                    \}\cf4 \
    \cf10 //                    .buttonStyle(PlainButtonStyle())\cf4 \
    \cf10 //                \}\cf4 \
    \cf10 //                .padding()\cf4 \
    \cf10 //                .padding(.top)\
\
//SceneKit\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0
\cf16 \cb17 SceneView(scene: \cf18 SCNScene\cf16 (\cf19 named\cf16 : \cf20 "coin3.usdz"\cf16 ), options: [.\cf21 allowsCameraControl\cf16 , .\cf21 autoenablesDefaultLighting\cf16 ])\
                        .\cf19 frame\cf16 (\cf19 width\cf16 : \cf22 300\cf16 , \cf19 height\cf16 : \cf22 200\cf16 )\
\
\
//Balance text\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0
\cf10 \cb3 //                        Group \{\cf4 \
\cf10 //                            Text(stateController.account.balanceWithoutDecimals)\cf4 \
\cf10 //                                .font(Font.system(size: 48, weight: .regular, design: .monospaced)) +\cf4 \
\cf10 //                            Text(stateController.account.balanceDecimals)\cf4 \
\cf10 //                                .font(Font.system(size: 24, weight: .regular, design: .monospaced)) +\cf4 \
\cf10 //                            Text(" \\(baseCurrency)")\cf4 \
\cf10 //                                .font(Font.system(size: 24, weight: .regular, design: .monospaced))\cf4 \
\cf10 //                        \}\
\
//Jar mark\

\f2\b \cf11 struct
\f0\b0 \cf4  \cf12 JarMark\cf4  : \cf2 View\cf4  \{\
    
\f2\b \cf11 var
\f0\b0 \cf4  \cf13 isIntermediate\cf4 : \cf2 Bool\cf4 \
    
\f2\b \cf11 var
\f0\b0 \cf4  \cf13 amount\cf4 : \cf2 String\cf4 \
    
\f2\b \cf11 var
\f0\b0 \cf4  \cf13 marksColor\cf4  = \cf2 Color\cf4 (\cf2 red\cf4 : \cf9 0.98\cf4 , \cf2 green\cf4 : \cf9 0.98\cf4 , \cf2 blue\cf4 : \cf9 0.98\cf4 )\
    \
    
\f2\b \cf11 var
\f0\b0 \cf4  \cf13 body\cf4 : 
\f2\b \cf11 some
\f0\b0 \cf4  \cf2 View\cf4  \{\
        \cf2 HStack\cf4 (\cf5 spacing\cf4 : \cf8 isIntermediate\cf4  ? \cf9 20\cf4  : \cf9 10\cf4 ) \{\
            \cf2 VStack\cf4 (\cf5 spacing\cf4 : \cf9 0\cf4 ) \{\
                \cf2 Rectangle\cf4 ()\
                    .\cf5 fill\cf4 (\cf8 marksColor\cf4 )\
                    .\cf5 frame\cf4 (\cf5 width\cf4 : \cf8 isIntermediate\cf4  ? \cf9 20\cf4  : \cf9 30\cf4 , \cf5 height\cf4 : \cf9 1\cf4 )\
                \cf2 Rectangle\cf4 ()\
                    .\cf5 fill\cf4 (.\cf5 black\cf4 )\
                    .\cf5 frame\cf4 (\cf5 width\cf4 : \cf8 isIntermediate\cf4  ? \cf9 20\cf4  : \cf9 30\cf4 , \cf5 height\cf4 : \cf9 1\cf4 )\
            \}\
            \cf2 ZStack\cf4  \{\
                \
                \cf2 Text\cf4 (\cf8 amount\cf4 )\
                    .\cf5 foregroundColor\cf4 (.\cf5 secondary\cf4 )\
                    .\cf5 font\cf4 (.\cf5 body\cf4 .\cf5 bold\cf4 ())\
                    .\cf5 offset\cf4 (\cf5 x\cf4 : \cf9 1\cf4 , \cf5 y\cf4 : \cf9 1\cf4 )\
                \cf2 Text\cf4 (\cf8 amount\cf4 )\
                    .\cf5 foregroundColor\cf4 (.\cf5 black\cf4 )\
                    .\cf5 font\cf4 (.\cf5 body\cf4 .\cf5 bold\cf4 ())\
            \}\
            \cf2 Spacer\cf4 ()\
        \}\
    \}\
\}\
\
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0
\cf14 ///
\f3 \cf10 This solution has problem with displaying currency symbol, as we can do animation not on a string but on a number (Double or Int)
\f0 \cf4 \
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0
\cf10 //                        HStack(alignment: .bottom, spacing: 0) \{\cf4 \
\cf10 //                            Color.clear\cf4 \
\cf10 //\cf4 \
\cf10 //\cf4 \
\cf10 //                                .animatingOverlay(for: stateController.account.balance)\cf4 \
\cf10 //                                .animation(.easeInOut(duration: 2).delay(0.5), value: stateController.account.balance)\cf4 \
\cf10 //                                .onAppear \{\cf4 \
\cf10 //                                    stateController.calculateBalance()\cf4 \
\cf10 //                            \}\cf4 \
\cf10 //                            Text("Euro")\cf4 \
\cf10 //                                .font(Font.system(size: 46, weight: .bold, design: .monospaced))\cf4 \
\cf10 //                        \}\cf4 \
\cf10 //                        .frame(height: 80)\cf4 \
\cf10 //                        .frame(maxWidth: .infinity)\cf4 \
                        \
                        \cf10 //Progress view\cf4 \
\cf10 //                        VStack \{\cf4 \
\cf10 //                            ProgressView(value: stateController.account.progress, total: 100) \{\cf4 \
\cf10 //                                HStack \{\cf4 \
\cf10 //                                    Image(systemName: "flag")\cf4 \
\cf10 //                                    Text(Double(stateController.account.goalAmount).currencyFormatter(with: stateController.account.baseCurrency.locale, code: stateController.account.baseCurrency.rawValue))\cf4 \
\cf10 //                                        .font(Font.body.monospaced())\cf4 \
\cf10 //                                \}\cf4 \
\cf10 //                                .foregroundColor(Color.secondary)\cf4 \
\cf10 //                            \} currentValueLabel: \{\cf4 \
\cf10 //                                Text("\\(stateController.account.progress.toStringWithDecimalIfNeeded()) %")\cf4 \
\cf10 //                            \}\cf4 \
\cf10 //                            .animation(.easeIn(duration: 3).delay(1), value: stateController.account.progress)\cf4 \
\cf10 //                            .padding()\cf4 \
\cf10 //                            .padding(.horizontal, 40)\cf4 \
\cf10 //                        \}\
\
\
\
\
//Semi-transparent dark color that cover UI when floating button is tapped\cf4 \
                \cf2 Rectangle\cf4 ()\
                    .\cf5 background\cf4 (.\cf5 thinMaterial\cf4 )\
                    .\cf5 edgesIgnoringSafeArea\cf4 (.\cf5 all\cf4 )\
                    .\cf5 opacity\cf4 (\cf8 expandButton\cf4  ? \cf9 1\cf4  : \cf9 0\cf4 )\
                    .\cf5 animation\cf4 (.\cf5 interactiveSpring\cf4 (), \cf5 value\cf4 : \cf8 expandButton\cf4 )\
\
\
\
\cf10 //Floating CTA button\cf4 \
                \cf6 PopupButton\cf4 (\cf6 expand\cf4 : \cf8 $expandButton\cf4 , \cf6 selection\cf4 : \cf8 $selection\cf4 )\
\
\
\
\cf10 //                    VStack(spacing: 6) \{\cf4 \
\cf10 //                        //Progress view\cf4 \
\cf10 //                        VStack \{\cf4 \
\cf10 //                            HStack \{\cf4 \
\cf10 //                                Image("flag-banner")\cf4 \
\cf10 //                                    .resizable()\cf4 \
\cf10 //                                    .frame(width: 20, height: 20, alignment: .center)\cf4 \
\cf10 //                                    .padding(10)\cf4 \
\cf10 //                                    .background(\cf4 \
\cf10 //                                        Circle()\cf4 \
\cf10 //                                            .fill(Color.seaGreen)\cf4 \
\cf10 //                                    )\cf4 \
\cf10 //                                ProgressView(value: stateController.account.progress, total: 100) \{\cf4 \
\cf10 //                                    HStack \{\cf4 \
\cf10 //\cf4 \
\cf10 //                                        Text(stateController.account.name)\cf4 \
\cf10 //                                            .font(.headline.bold())\cf4 \
\cf10 //                                            .lineLimit(1)\cf4 \
\cf10 //                                        Spacer()\cf4 \
\cf10 //                                        Text(Double(stateController.account.goalAmount).currencyFormatter(with: stateController.account.baseCurrency.locale, code: stateController.account.baseCurrency.rawValue))\cf4 \
\cf10 //                                    \}\cf4 \
\cf10 //\cf4 \
\cf10 //                                \} currentValueLabel: \{\cf4 \
\cf10 //                                    Text("\\(stateController.account.progress.toStringWithDecimalIfNeeded()) %")\cf4 \
\cf10 //                                        .foregroundColor(Color.turquoiseBlue)\cf4 \
\cf10 //                                \}\cf4 \
\cf10 //                                .tint(.turquoiseBlue)\cf4 \
\cf10 //                                .animation(.easeIn(duration: 3).delay(1), value: stateController.account.progress)\cf4 \
\cf10 //                            .padding()\cf4 \
\cf10 //                            \}\cf4 \
\cf10 //                            .padding()\cf4 \
\cf10 //                            .padding(.vertical)\cf4 \
\cf10 //                        \}\cf4 \
\cf10 //\cf4 \
\cf10 //                    \}\
\
\
\

\f2\b \cf11 func
\f0\b0 \cf4  \cf13 buttonsForAddingAssets\cf4 () -> 
\f2\b \cf11 some
\f0\b0 \cf4  \cf2 View\cf4  \{\
            \cf2 HStack\cf4 (\cf5 spacing\cf4 : \cf9 0\cf4 ) \{\
\cf10 //                Spacer()\cf4 \
                \cf2 VStack\cf4 (\cf5 spacing\cf4 : \cf9 8\cf4 ) \{\
                    \cf6 RoundButtonMonotone\cf4 (\
                        \cf8 action\cf4 : \{ \cf8 viewModel\cf4 .\cf8 setNavigationTo\cf4 (\cf8 selection\cf4 : \cf9 2\cf4 )\},\
                        \cf8 text\cf4 : \cf7 "commodity"\cf4 ,\
                        \cf8 color1\cf4 : .\cf8 cyclamen\cf4 ,\
                        \cf8 color2\cf4 : .\cf8 magentaHaze\cf4 \
                    )\
                    \cf2 Text\cf4 (\cf7 "Add gold"\cf4 )\
                        .\cf8 textUnderButtonStyle\cf4 ()\
                \}\
                \cf2 Spacer\cf4 ()\
                \cf2 VStack\cf4 (\cf5 spacing\cf4 : \cf9 8\cf4 ) \{\
                    \cf6 RoundButtonMonotone\cf4 (\
                        \cf8 action\cf4 : \{ \cf8 viewModel\cf4 .\cf8 setNavigationTo\cf4 (\cf8 selection\cf4 : \cf9 1\cf4 )\},\
                        \cf8 text\cf4 : \cf7 "currency"\cf4 ,\
                        \cf8 color1\cf4 : .\cf8 mountainMeadow\cf4 ,\
                        \cf8 color2\cf4 : .\cf8 jellyBean\cf4 \
                    )\
                    \cf2 Text\cf4 (\cf7 "Add currency"\cf4 )\
                        .\cf8 textUnderButtonStyle\cf4 ()\
                \}\
                \cf2 Spacer\cf4 ()\
                \cf2 VStack\cf4 (\cf5 spacing\cf4 : \cf9 8\cf4 ) \{\
                    \cf6 RoundButtonMonotone\cf4 (\
                        \cf8 action\cf4 : \{ \cf8 viewModel\cf4 .\cf8 setNavigationTo\cf4 (\cf8 selection\cf4 : \cf9 3\cf4 )\},\
                        \cf8 text\cf4 : \cf7 "crypto"\cf4 ,\
                        \cf8 color1\cf4 : .\cf8 spanishSkyBlue\cf4 ,\
                        \cf8 color2\cf4 : .\cf8 freeSpeechBlue\cf4 \
                    )\
                    \cf2 Text\cf4 (\cf7 "Add crypto"\cf4 )\
                        .\cf8 textUnderButtonStyle\cf4 ()\
                \}\
\cf10 //                Spacer()\cf4 \
            \}\
            .\cf5 padding\cf4 ()\
            .\cf5 padding\cf4 (.\cf5 vertical\cf4 )\
            .\cf5 padding\cf4 ()\
        \}\cf10 \
\
\
\
//                    Text("Portfolio")\cf4 \
\cf10 //                        .font(.title)\cf4 \
\cf10 //                        .bold()\cf4 \
\cf10 //                        .foregroundColor(.white)\cf4 \
\cf10 //                        .frame(maxWidth: .infinity, alignment: .leading)\cf4 \
\cf10 //                        .padding(.horizontal)\cf4 \
\cf10 //                    PortfolioTopCard(\cf4 \
\cf10 //                        GoalAmountAsDouble: goalAmount,\cf4 \
\cf10 //                        totalAmount: totalAmount,\cf4 \
\cf10 //                        portfolioItems: items\cf4 \
\cf10 //                    )\cf4 \
\cf10 //                    LazyVGrid(columns: gridItemLayout, spacing: 16) \{\cf4 \
\cf10 //                        ForEach(filteredItems) \{ item in\cf4 \
\cf10 //                            CompoundAssetGridItem(\cf4 \
\cf10 //                                assetName: item.assetName.rawValue,\cf4 \
\cf10 //                                amount: item.amountInBaseCurrency.currencyFormatter(\cf4 \
\cf10 //                                    with: locale,\cf4 \
\cf10 //                                    code: baseCurrency\cf4 \
\cf10 //                                ),\cf4 \
\cf10 //                                color: item.color\cf4 \
\cf10 //                            )\cf4 \
\cf10 //                        \}\cf4 \
\cf10 //                    \}\cf4 \
\cf10 //                    .padding(.horizontal)\
\
\
\
\
\
Currency selection\
//            ScrollView(.vertical, showsIndicators: false) \{\cf4 \
\cf10 //                //Currency selection button\cf4 \
\cf10 //                ChevronStyleTextButton(\cf4 \
\cf10 //                    buttonText: vm.generateCurrencyDescription(sc: stateController),\cf4 \
\cf10 //                    isShowing: $vm.displayCurrencySelector\cf4 \
\cf10 //                )\cf4 \
\cf10 //\cf4 \
\cf10 //                //Conditional view to compensate the appearance of currency selector\cf4 \
\cf10 //                ZStack \{\cf4 \
\cf10 //                    if !vm.displayCurrencySelector \{\cf4 \
\cf10 //                        Rectangle()\cf4 \
\cf10 //                            .fill(.clear)\cf4 \
\cf10 //                            .frame(width: 20, height: 60, alignment: .center)\cf4 \
\cf10 //                    \}\cf4 \
\cf10 //                \}\cf4 \
\cf10 //\cf4 \
\cf10 //                CurrencySwipingSelector(selectedCurrency: $vm.selectedCurrency)\cf4 \
\cf10 //                //Frame nil and clipped allow the "reveal" effect\cf4 \
\cf10 //                    .frame(height: vm.displayCurrencySelector ? nil : 0, alignment: .center)\cf4 \
\cf10 //                    .clipped()\cf4 \
\cf10 //                    .animation(.easeInOut, value: vm.displayCurrencySelector)\cf4 \
\cf10 //\cf4 \
\cf10 //\cf4 \
\cf10 //                //Amount\cf4 \
\cf10 //                AmountLine(\cf4 \
\cf10 //                    amount: vm.amount,\cf4 \
\cf10 //                    showPlaceholder: vm.showPlaceholder,\cf4 \
\cf10 //                    placeholderText: vm.generatePlaceholder()\cf4 \
\cf10 //                )\cf4 \
\cf10 //                .padding()\cf4 \
\cf10 //\cf4 \
\cf10 //\cf4 \
\cf10 //            \}\
\
\
}